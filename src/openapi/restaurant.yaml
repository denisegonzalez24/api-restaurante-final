openapi: 3.0.1
info:
  title: Restaurant API
  description: API para gestión de platos, categorías y órdenes (TP2)
  version: "1.0"
  contact:
    name: Restaurant API Support
    email: support@restaurant.com

paths:
  /api/v1/Dish:
    post:
      tags: [Dish]
      summary: Crear nuevo plato
      description: Crea un nuevo plato. El nombre debe ser único; precio > 0; la categoría debe existir.
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/DishRequest' }
            example:
              name: "Pizza Margherita"
              description: "Clásica con tomate y mozzarella"
              price: 850.50
              category: 1
              image: "https://restaurant.com/images/pizza-margherita.jpg"
      responses:
        "201":
          description: Plato creado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/DishResponse' }
        "400":
          description: Datos inválidos
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiError' }
              examples:
                invalid_price: { value: { message: "El precio debe ser mayor a cero" } }
                empty_name:   { value: { message: "El nombre del plato es obligatorio" } }
        "409":
          description: Conflicto de nombre
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiError' }
              example: { message: "Ya existe un plato con ese nombre" }

    get:
      tags: [Dish]
      summary: Buscar platos
      description: Filtros opcionales por nombre, categoría y sólo activos; orden por precio asc/desc.
      parameters:
        - in: query
          name: name
          schema: { type: string }
          description: Búsqueda parcial por nombre
        - in: query
          name: category
          schema: { type: integer, format: int32 }
          description: Id de categoría
        - in: query
          name: sortByPrice
          schema: { type: string, enum: [asc, desc] }
          description: Orden por precio
        - in: query
          name: onlyActive
          schema: { type: boolean, default: true }
          description: true = sólo platos disponibles
      responses:
        "200":
          description: Lista de platos
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/DishResponse' }
        "400":
          description: Parámetros inválidos
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiError' }
              example: { message: "Parámetros de ordenamiento inválidos" }

  /api/v1/Dish/{id}:
    get:
      tags: [Dish]
      summary: Obtener plato por ID
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/DishResponse' }
        "400":
          description: ID inválido
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiError' }
              example: { message: "Formato de ID inválido" }
        "404":
          description: No encontrado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiError' }
              example: { message: "Plato no encontrado" }

    put:
      tags: [Dish]
      summary: Actualizar plato existente
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/DishUpdateRequest' }
      responses:
        "200":
          description: Actualizado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/DishResponse' }
        "400":
          description: Datos inválidos
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiError' }
              example: { message: "El precio debe ser mayor a cero" }
        "404":
          description: No encontrado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiError' }
              example: { message: "Plato no encontrado" }
        "409":
          description: Conflicto de nombre
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiError' }
              example: { message: "Ya existe un plato con ese nombre" }

    delete:
      tags: [Dish]
      summary: Eliminar plato (con restricción de uso)
      description: Devuelve 409 si el plato está referenciado por órdenes. Puede implementarse como soft-delete.
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200":
          description: Eliminado (o desactivado)
          content:
            application/json:
              schema: { $ref: '#/components/schemas/DishResponse' }
        "404":
          description: No encontrado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiError' }
              example: { message: "Plato no encontrado" }
        "409":
          description: En uso
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiError' }
              example: { message: "No se puede eliminar el plato porque está incluido en órdenes activas" }

  /api/v1/Category:
    get:
      tags: [Category]
      summary: Listar categorías
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/CategoryResponse' }

  /api/v1/DeliveryType:
    get:
      tags: [DeliveryType]
      summary: Listar tipos de entrega
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/GenericResponse' }

  /api/v1/Status:
    get:
      tags: [Status]
      summary: Listar estados
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/GenericResponse' }

  /api/v1/Order:
    post:
      tags: [Order]
      summary: Crear nueva orden
      description: Calcula total y asigna estado Pending a orden e ítems.
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/OrderRequest' }
            example:
              items:
                - id: "460728aa-cfb6-4d47-aabf-8662b99d6b83"
                  quantity: 2
                  notes: "Sin albahaca"
                - id: "c1c61919-0d84-4038-a3a8-7537a24de75e"
                  quantity: 1
              delivery:
                id: 1
                to: "Mesa 5"
              notes: "Timbre 5B"
      responses:
        "201":
          description: Creada
          content:
            application/json:
              schema: { $ref: '#/components/schemas/OrderDetailsResponse' }
        "400":
          description: Datos inválidos
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiError' }
              examples:
                invalid_dish:     { value: { message: "El plato especificado no existe o no está disponible" } }
                invalid_quantity: { value: { message: "La cantidad debe ser mayor a 0" } }
                missing_delivery: { value: { message: "Debe especificar un tipo de entrega válido" } }

    get:
      tags: [Order]
      summary: Buscar órdenes
      description: Filtra por rango de fechas y estado (opcional).
      parameters:
        - in: query
          name: from
          schema: { type: string, format: date-time }
        - in: query
          name: to
          schema: { type: string, format: date-time }
        - in: query
          name: status
          schema: { type: integer, format: int32 }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/OrderDetailsResponse' }
        "400":
          description: Parámetros inválidos
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiError' }
              example: { message: "Rango de fechas inválido" }

  /api/v1/Order/{id}:
    get:
      tags: [Order]
      summary: Obtener orden por ID
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }  
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/OrderDetailsResponse' }
        "404":
          description: No encontrada
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiError' }
              example: { message: "Orden no encontrada" }

  /api/v1/Order/{orderId}/items:
    post:
      tags: [Order]
      summary: Agregar ítem a la orden (mientras no esté cerrada)
      parameters:
        - in: path
          name: orderId
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [dishId, quantity]
              properties:
                dishId:   { type: string, format: uuid }
                quantity: { type: integer, minimum: 1 }
                notes:    { type: string, nullable: true }
            example:
              dishId: "c1c61919-0d84-4038-a3a8-7537a24de75e"
              quantity: 1
              notes: "mitad"
      responses:
        "200":
          description: Ítem agregado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/OrderDetailsResponse' }
        "400":
          description: Orden cerrada o datos inválidos
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiError' }
              examples:
                closed: { value: { message: "La orden está cerrada; no se pueden agregar platos" } }
        "404":
          description: No encontrada
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiError' }
              examples:
                order: { value: { message: "Orden no encontrada" } }
                dish:  { value: { message: "Plato no encontrado" } }

  /api/v1/Order/{orderId}/items/{itemId}/quantity:
    put:
      tags: [Order]
      summary: Cambiar cantidad de un ítem (mientras no esté cerrada)
      parameters:
        - in: path
          name: orderId
          required: true
          schema: { type: string }
        - in: path
          name: itemId
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [quantity]
              properties:
                quantity: { type: integer, minimum: 1 }
            example: { quantity: 3 }
      responses:
        "200":
          description: Cantidad actualizada
          content:
            application/json:
              schema: { $ref: '#/components/schemas/OrderDetailsResponse' }
        "400":
          description: Orden cerrada o cantidad inválida
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiError' }
        "404":
          description: No encontrado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiError' }
              examples:
                order: { value: { message: "Orden no encontrada" } }
                item:  { value: { message: "Item no encontrado" } }

  /api/v1/Order/{orderId}/items/{itemId}/status:
    put:
      tags: [Order]
      summary: Actualizar estado de un ítem
      description: Al actualizar, el estado general de la orden se recalcula como el **mínimo** de sus ítems.
      parameters:
        - in: path
          name: orderId
          required: true
          schema: { type: string }
        - in: path
          name: itemId
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/OrderItemUpdateRequest' }
            example: { status: 2 }  
      responses:
        "200":
          description: Estado actualizado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/OrderDetailsResponse' }
        "400":
          description: Estado inválido
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiError' }
              example: { message: "El estado especificado no es válido" }
        "404":
          description: No encontrado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiError' }
              examples:
                order: { value: { message: "Orden no encontrada" } }
                item:  { value: { message: "Item no encontrado" } }

components:
  schemas:
    ApiError:
      type: object
      properties:
        message: { type: string, nullable: true }
      additionalProperties: false

    # -------- DISH --------
    DishRequest:
      type: object
      required: [name, price, category]
      properties:
        name:        { type: string, maxLength: 100 }
        description: { type: string, maxLength: 500, nullable: true }
        price:       { type: number, format: double, minimum: 0.01 }
        category:    { type: integer, format: int32 }
        image:       { type: string, format: uri, nullable: true }
      additionalProperties: false

    DishUpdateRequest:
      type: object
      required: [name, price, category, isActive]
      properties:
        name:        { type: string, maxLength: 100 }
        description: { type: string, maxLength: 500, nullable: true }
        price:       { type: number, format: double, minimum: 0.01 }
        category:    { type: integer, format: int32 }
        image:       { type: string, format: uri, nullable: true }
        isActive:    { type: boolean }
      additionalProperties: false

    DishResponse:
      type: object
      properties:
        id:          { type: string, format: uuid }
        name:        { type: string, nullable: true }
        description: { type: string, nullable: true }
        price:       { type: number, format: double }
        category:    { $ref: '#/components/schemas/GenericResponse' }
        image:       { type: string, nullable: true }
        isActive:    { type: boolean }
        createdAt:   { type: string, format: date-time }
        updatedAt:   { type: string, format: date-time }
      additionalProperties: false

    DishShortResponse:
      type: object
      properties:
        id:    { type: string, format: uuid }
        name:  { type: string, nullable: true }
        image: { type: string, nullable: true }
      additionalProperties: false

    CategoryResponse:
      type: object
      properties:
        id:          { type: integer, format: int32 }
        name:        { type: string, nullable: true }
        description: { type: string, nullable: true }
        order:       { type: integer, format: int32 }
      additionalProperties: false

    GenericResponse:
      type: object
      properties:
        id:   { type: integer, format: int32 }
        name: { type: string, nullable: true }
      additionalProperties: false

    Items:
      type: object
      required: [id, quantity]
      properties:
        id:       { type: string, format: uuid, description: "Dish ID" }
        quantity: { type: integer, format: int32, minimum: 1 }
        notes:    { type: string, nullable: true }
      additionalProperties: false

    Delivery:
      type: object
      required: [id]
      properties:
        id: { type: integer, format: int32, description: "1=Delivery, 2=Retiro, 3=En local" }
        to: { type: string, nullable: true, description: "Dirección si aplica" }
      additionalProperties: false

    OrderRequest:
      type: object
      required: [items, delivery]
      properties:
        items:
          type: array
          items: { $ref: '#/components/schemas/Items' }
        delivery: { $ref: '#/components/schemas/Delivery' }
        notes:    { type: string, nullable: true }
      additionalProperties: false

    OrderItemResponse:
      type: object
      properties:
        id:       { type: integer, format: int64 }
        quantity: { type: integer, format: int32 }
        notes:    { type: string, nullable: true }
        status:   { $ref: '#/components/schemas/GenericResponse' }
        dish:     { $ref: '#/components/schemas/DishShortResponse' }
      additionalProperties: false

    OrderDetailsResponse:
      type: object
      properties:
        orderNumber: { type: integer, format: int64 }
        totalAmount: { type: number,  format: double }
        deliveryTo:  { type: string, nullable: true }
        notes:       { type: string, nullable: true }
        status:      { $ref: '#/components/schemas/GenericResponse' }
        deliveryType: { $ref: '#/components/schemas/GenericResponse' }
        items:
          type: array
          items: { $ref: '#/components/schemas/OrderItemResponse' }
        createdAt:   { type: string, format: date-time }
        updatedAt:   { type: string, format: date-time }
      additionalProperties: false

    OrderItemUpdateRequest:
      type: object
      required: [status]
      properties:
        status:
          type: integer
          format: int32
          description: 1=Pending, 2=In progress, 3=Ready, 4=Delivered, 5=Cancelled
      additionalProperties: false
